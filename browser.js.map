{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns the skewness of an F distribution.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {PositiveNumber} skewness\n*\n* @example\n* var v = skewness( 3.0, 7.0 );\n* // returns 11.0\n*\n* @example\n* var v = skewness( 4.0, 12.0 );\n* // returns ~3.207\n*\n* @example\n* var v = skewness( 8.0, 7.0 );\n* // returns ~10.088\n*\n* @example\n* var v = skewness( 1.0, 4.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = skewness( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 2.0 );\n* // returns NaN\n*/\nfunction skewness( d1, d2 ) {\n\tvar out;\n\tif ( d1 <= 0.0 || d2 <= 6.0 ) {\n\t\treturn NaN;\n\t}\n\tout = ( ( 2.0*d1 ) + d2 - 2.0 ) * sqrt( 8.0 * ( d2-4.0 ) );\n\tout /= ( d2-6.0 ) * sqrt( d1 * ( d1+d2-2.0 ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n"],"names":["sqrt","Math","d1","d2","out","NaN"],"mappings":";yCA6CA,IAAIA,EAAOC,KAAKD,YCqBhB,SAAmBE,EAAIC,GACtB,IAAIC,EACJ,OAAKF,GAAM,GAAOC,GAAM,EAChBE,KAERD,GAAU,EAAIF,EAAOC,EAAK,GAAQH,EAAM,GAAQG,EAAG,IACnDC,IAASD,EAAG,GAAQH,EAAME,GAAOA,EAAGC,EAAG,IAExC","x_google_ignoreList":[0]}